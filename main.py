from fastapi import FastAPI, Request, Form, Depends, status
from fastapi.responses import HTMLResponse, RedirectResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from aiogram import Bot
from models import Message, Chat
from bot import TelegramBot
from tortoise import Tortoise
from starlette.middleware.sessions import SessionMiddleware
import asyncio
import logging
import secrets
import threading
import aiohttp

# Initialize FastAPI
app = FastAPI()
app.add_middleware(SessionMiddleware, secret_key=secrets.token_hex(32))
app.mount("/static", StaticFiles(directory="static"), name="static")
templates = Jinja2Templates(directory="templates")

# Global bot state
bot_instance = None
bot_thread = None

# Tortoise initialization
TORTOISE_CONFIG = {
    "connections": {"default": "sqlite://db.sqlite3"},
    "apps": {
        "models": {
            "models": ["models"],
            "default_connection": "default",
        }
    },
}

@app.on_event("startup")
async def startup():
    await Tortoise.init(config=TORTOISE_CONFIG)
    await Tortoise.generate_schemas()

@app.on_event("shutdown")
async def shutdown():
    global bot_instance, bot_thread
    if bot_instance:
        await bot_instance.stop()
    if bot_thread:
        bot_thread.join(timeout=5)

async def require_auth(request: Request):
    if "bot_token" not in request.session:
        return RedirectResponse(url="/login", status_code=status.HTTP_302_FOUND)
    return True

async def verify_token(token: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞"""
    try:
        async with Bot(token=token) as temp_bot:
            await temp_bot.get_me()
        return True
    except Exception as e:
        logging.error(f"Token verification error: {e}")
        return False

def run_bot(token: str):
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    global bot_instance
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    
    bot_instance = TelegramBot(token)
    loop.run_until_complete(bot_instance.start())

async def start_bot(token: str):
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ"""
    global bot_thread
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –±–æ—Ç–∞
    if bot_instance:
        await bot_instance.stop()
    if bot_thread:
        bot_thread.join(timeout=5)
    
    # –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    bot_thread = threading.Thread(target=run_bot, args=(token,), daemon=True)
    bot_thread.start()
    return bot_instance

# Routes
@app.get("/login", response_class=HTMLResponse)
async def login_page(request: Request, error: str = None):
    return templates.TemplateResponse("login.html", {
        "request": request,
        "error": error
    })

@app.post("/login")
async def login(request: Request, token: str = Form(...)):
    if await verify_token(token):
        await start_bot(token)
        request.session["bot_token"] = token
        return RedirectResponse(url="/chats", status_code=status.HTTP_302_FOUND)
    
    return templates.TemplateResponse("login.html", {
        "request": request,
        "error": "Invalid bot token"
    })

@app.get("/logout")
async def logout(request: Request):
    global bot_instance, bot_thread
    if bot_instance:
        await bot_instance.stop()
    if bot_thread:
        bot_thread.join(timeout=5)
    
    request.session.clear()
    return RedirectResponse(url="/login")

@app.get("/chats", response_class=HTMLResponse)
async def chats(request: Request, auth: bool = Depends(require_auth)):
    # –î–æ–±–∞–≤–∏–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    import time
    time.sleep(0.5)
    
    chats = await Chat.all().order_by("-updated")
    return templates.TemplateResponse("chats.html", {
        "request": request,
        "chats": chats
    })

@app.get("/chat/{chat_id}", response_class=HTMLResponse)
async def chat_get(request: Request, chat_id: int, auth: bool = Depends(require_auth)):
    messages = await Message.filter(chat_id=chat_id).order_by("timestamp")
    chat = await Chat.get_or_none(id=chat_id)
    if chat:
        chat.unread = 0
        await chat.save()
    return templates.TemplateResponse("chat.html", {
        "request": request,
        "messages": messages,
        "chat": chat
    })

# ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º)
import threading

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É
bot_lock = threading.Lock()

import aiohttp
import asyncio

@app.post("/chat/{chat_id}")
async def chat_post(
    request: Request,
    chat_id: int,
    text: str = Form(...),
    auth: bool = Depends(require_auth)
):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î
    await Message.create(
        chat_id=chat_id,
        text=text,
        direction='outgoing'
    )
    logging.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î: chat_id={chat_id}, text='{text}'")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
    chat = await Chat.get_or_none(id=chat_id)
    if chat:
        chat.last_message = text
        chat.unread = 0
        await chat.save()
        logging.info(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —á–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram API —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º aiohttp
    token = request.session.get("bot_token")
    if token:
        try:
            api_url = f"https://api.telegram.org/bot{token}/sendMessage"
            payload = {
                "chat_id": chat_id,
                "text": text
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(api_url, json=payload) as response:
                    result = await response.json()
                    
                    if result.get('ok'):
                        logging.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Telegram API")
                    else:
                        error_msg = result.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                        logging.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram API: {error_msg}")
        except Exception as e:
            logging.error(f"üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ Telegram API: {e}")
    else:
        logging.error("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–µ—Å—Å–∏–∏")
    
    return RedirectResponse(url=f"/chat/{chat_id}", status_code=status.HTTP_302_FOUND)