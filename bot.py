from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message
from models import Message as DBMessage, Chat, Bot as BotModel
import logging
from tortoise import Tortoise

TORTOISE_CONFIG = {
    "connections": {"default": "sqlite://db.sqlite3"},
    "apps": {
        "models": {
            "models": ["main"],
            "default_connection": "default",
        }
    },
}

class BaseBot:
    def __init__(self, token: str, bot_id: int):
        self.token = token
        self.bot_id = bot_id
        self.bot = Bot(token=token)
        self.storage = MemoryStorage()
        self.dp = Dispatcher(storage=self.storage)
        self.running = False
        self.bot_id = bot_id
        self._tortoise_inited = False
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.dp.message.register(self.handle_message)
        
        logging.info(f"Base bot initialized: {token[:5]}...")
        
    async def init_orm(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Tortoise ORM –¥–ª—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞"""
        if not self._tortoise_inited:
            await Tortoise.init(config=TORTOISE_CONFIG)
            self._tortoise_inited = True
            logging.info(f"Tortoise ORM initialized for bot {self.bot_id}")

    async def handle_message(self, message: types.Message):
        
        if not self._tortoise_inited:
            await self.init_orm()
        
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö –±–æ—Ç–æ–≤"""
        try:
            chat_id = message.chat.id
            text = message.text or message.caption or ''
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            logging.info(f"Received message from chat {chat_id}: {text[:100]}{'...' if len(text) > 100 else ''}")
            
            # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å –±–æ—Ç–∞ –∏–∑ –ë–î
            try:
                bot_instance = await BotModel.get(id=self.bot_id)
                logging.info(f"Bot instance found: {bot_instance.name}")
            except Exception as e:
                logging.error(f"Error getting bot model: {e}")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                db_message = await DBMessage.create(
                    chat_id=chat_id,
                    text=text,
                    direction='incoming',
                    bot=bot_instance
                )
                logging.info(f"Message saved to DB with ID {db_message.id}")
            except Exception as e:
                logging.error(f"Error saving message to DB: {e}", exc_info=True)
                return
            
            # –°–æ–∑–¥–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞
            chat_title = message.chat.title or ""
            if not chat_title:
                if message.chat.first_name or message.chat.last_name:
                    chat_title = f"{message.chat.first_name or ''} {message.chat.last_name or ''}".strip()
                else:
                    chat_title = f"User #{chat_id}"
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
            try:
                chat, created = await Chat.get_or_create(
                    id=chat_id,
                    bot=bot_instance,
                    defaults={
                        'title': chat_title,
                        'last_message': text,
                        'unread': 1
                    }
                )
                
                if not created:
                    chat.unread += 1
                    chat.last_message = text
                    await chat.save()
                
                logging.info(f"Chat updated: {chat_title} (ID: {chat_id})")
                
            except Exception as e:
                logging.error(f"Error updating chat: {e}", exc_info=True)
            
        except Exception as e:
            logging.error(f"Unhandled error in message handler: {e}", exc_info=True)
            
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if not self.running:
            self.running = True
            logging.info("Starting bot polling...")
            await self.dp.start_polling(self.bot)
            logging.info("Bot polling stopped")

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        if self.running:
            self.running = False
            logging.info("Stopping bot...")
            await self.dp.stop_polling()
            await self.storage.close()
            logging.info("Bot stopped")

class ShopBot(BaseBot):
    """–ë–æ—Ç –¥–ª—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞"""
    def __init__(self, token: str, bot_id: int):
        super().__init__(token, bot_id)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.dp.message.register(self.start_command, Command("start"))
        self.dp.message.register(self.handle_product_query, F.text.lower().contains("—Ç–æ–≤–∞—Ä"))
        
        logging.info(f"Shop bot initialized: {token[:5]}...")

    async def start_command(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        await message.answer("üõí –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:")
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞

    async def handle_product_query(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ —Ç–æ–≤–∞—Ä–∞—Ö"""
        await message.answer("üîç –í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤...")
        # –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤

class ConsultationBot(BaseBot):
    """–ë–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
    def __init__(self, token: str, bot_id: int):
        super().__init__(token, bot_id)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.dp.message.register(self.start_command, Command("start"))
        self.dp.message.register(self.handle_schedule, Command("schedule"))
        
        logging.info(f"Consultation bot initialized: {token[:5]}...")

    async def start_command(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        await message.answer("üìÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏!")
        
    async def handle_schedule(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /schedule"""
        await message.answer("üóìÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:")
        # –õ–æ–≥–∏–∫–∞ –∑–∞–ø–∏—Å–∏

class TranscriptionBot(BaseBot):
    """–ë–æ—Ç –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    def __init__(self, token: str, bot_id: int):
        super().__init__(token, bot_id)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.dp.message.register(self.transcribe_message)
        
        logging.info(f"Transcription bot initialized: {token[:5]}...")

    async def transcribe_message(self, message: Message):
        """–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        text = message.text or message.caption or ''
        if text:
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
            await message.answer(f"üî§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: {text.upper()}")